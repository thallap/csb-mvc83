{"version":3,"sources":["treeData.js","index.js"],"names":["renderDepthTitle","path","length","treeData","title","subtitle","expanded","children","href","node","style","backgroundColor","display","borderRadius","color","padding","noDragging","noChildren","App","state","searchString","searchFocusIndex","searchFoundCount","handleTreeOnChange","setState","handleSearchOnChange","e","target","value","selectPrevMatch","selectNextMatch","toggleNodeExpansion","prevState","toggleExpandedForAll","this","className","onClick","bind","onChange","onMoveNode","treeIndex","global","console","debug","maxDepth","searchQuery","searchFocusOffset","canDrag","canDrop","nextParent","searchFinishCallback","matches","isVirtualized","generateNodeProps","rowInfo","buttons","verticalAlign","objectString","Object","keys","map","k","join","alert","alertNodeInfo","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3291ecac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst maxDepth = 5;\n\nconst renderDepthTitle = ({ path }) => `Depth: ${path.length}`;\n\nconst treeData = [\n  {\n    title: \"`title`\",\n    subtitle: \"`subtitle`\",\n    expanded: true,\n    children: [\n      {\n        title: \"Child Node\",\n        subtitle: \"Defined in `children` array belonging to parent\"\n      },\n      {\n        title: \"Nested structure is rendered virtually\",\n        subtitle: (\n          <span>\n            The tree uses&nbsp;\n            <a href=\"https://github.com/bvaughn/react-virtualized\">\n              react-virtualized\n            </a>\n            &nbsp;and the relationship lines are more of a visual trick.\n          </span>\n        )\n      }\n    ]\n  },\n  {\n    expanded: true,\n    title: \"Any node can be the parent or child of any other node\",\n    children: [\n      {\n        expanded: true,\n        title: \"Chicken\",\n        children: [{ title: \"Egg\" }]\n      }\n    ]\n  },\n  {\n    title: \"Button(s) can be added to the node\",\n    subtitle:\n      \"Node info is passed when generating so you can use it in your onClick handler\"\n  },\n  {\n    title: \"Show node children by setting `expanded`\",\n    subtitle: ({ node }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n    children: [\n      {\n        title: \"Bruce\",\n        subtitle: ({ node }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n        children: [{ title: \"Bruce Jr.\" }, { title: \"Brucette\" }]\n      }\n    ]\n  },\n  {\n    title: \"Advanced\",\n    subtitle: \"Settings, behavior, etc.\",\n    children: [\n      {\n        title: (\n          <div>\n            <div\n              style={{\n                backgroundColor: \"gray\",\n                display: \"inline-block\",\n                borderRadius: 10,\n                color: \"#FFF\",\n                padding: \"0 5px\"\n              }}\n            >\n              Any Component\n            </div>\n            &nbsp;can be used for `title`\n          </div>\n        )\n      },\n      {\n        expanded: true,\n        title: \"Limit nesting with `maxDepth`\",\n        subtitle: `It's set to ${maxDepth} for this example`,\n        children: [\n          {\n            expanded: true,\n            title: renderDepthTitle,\n            children: [\n              {\n                expanded: true,\n                title: renderDepthTitle,\n                children: [\n                  { title: renderDepthTitle },\n                  {\n                    title: ({ path }) =>\n                      path.length >= maxDepth\n                        ? \"This cannot be dragged deeper\"\n                        : \"This can be dragged deeper\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        title: \"Disable dragging on a per-node basis with the `canDrag` prop\",\n        subtitle: \"Or set it to false to disable all dragging.\",\n        noDragging: true\n      },\n      {\n        title: \"You cannot give this children\",\n        subtitle:\n          \"Dropping is prevented via the `canDrop` API using `nextParent`\",\n        noChildren: true\n      },\n      {\n        title:\n          \"When node contents are really long, it will cause a horizontal scrollbar\" +\n          \" to appear. Deeply nested elements will also trigger the scrollbar.\"\n      }\n    ]\n  }\n];\n\nexport default treeData;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortableTree, { toggleExpandedForAll } from \"react-sortable-tree\";\n\nimport treeData from \"./treeData\";\n\nimport \"./styles.css\";\nimport \"react-sortable-tree/style.css\";\n\nconst maxDepth = 5;\n\nconst alertNodeInfo = ({ node, path, treeIndex }) => {\n  const objectString = Object.keys(node)\n    .map(k => (k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`))\n    .join(\",\\n   \");\n\n  global.alert(\n    \"Info passed to the button generator:\\n\\n\" +\n      `node: {\\n   ${objectString}\\n},\\n` +\n      `path: [${path.join(\", \")}],\\n` +\n      `treeIndex: ${treeIndex}`\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    searchString: \"\",\n    searchFocusIndex: -1,\n    searchFoundCount: 0,\n    treeData\n  };\n\n  handleTreeOnChange = treeData => {\n    this.setState({ treeData });\n  };\n\n  handleSearchOnChange = e => {\n    this.setState({\n      searchString: e.target.value\n    });\n  };\n\n  selectPrevMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\n          : searchFoundCount - 1\n    });\n  };\n\n  selectNextMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFocusIndex + 1) % searchFoundCount\n          : 0\n    });\n  };\n\n  toggleNodeExpansion = expanded => {\n    this.setState(prevState => ({\n      treeData: toggleExpandedForAll({ treeData: prevState.treeData, expanded })\n    }));\n  };\n\n  render() {\n    const {\n      treeData,\n      searchString,\n      searchFocusIndex,\n      searchFoundCount\n    } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"bar-wrapper\">\n          <button onClick={this.toggleNodeExpansion.bind(this, true)}>\n            Expand all\n          </button>\n          <button\n            className=\"collapse\"\n            onClick={this.toggleNodeExpansion.bind(this, false)}\n          >\n            Collapse all\n          </button>\n          <label>Search: </label>\n          <input onChange={this.handleSearchOnChange} />\n          <button className=\"previous\" onClick={this.selectPrevMatch}>\n            Previous\n          </button>\n          <button className=\"next\" onClick={this.selectNextMatch}>\n            Next\n          </button>\n          <label>\n            {searchFocusIndex} / {searchFoundCount}\n          </label>\n        </div>\n        <div className=\"tree-wrapper\">\n          <SortableTree\n            treeData={treeData}\n            onChange={this.handleTreeOnChange}\n            onMoveNode={({ node, treeIndex, path }) =>\n              global.console.debug(\n                \"node:\",\n                node,\n                \"treeIndex:\",\n                treeIndex,\n                \"path:\",\n                path\n              )\n            }\n            maxDepth={maxDepth}\n            searchQuery={searchString}\n            searchFocusOffset={searchFocusIndex}\n            canDrag={({ node }) => !node.noDragging}\n            canDrop={({ nextParent }) => !nextParent || !nextParent.noChildren}\n            searchFinishCallback={matches =>\n              this.setState({\n                searchFoundCount: matches.length,\n                searchFocusIndex:\n                  matches.length > 0 ? searchFocusIndex % matches.length : 0\n              })\n            }\n            isVirtualized={true}\n            generateNodeProps={rowInfo => ({\n              buttons: [\n                <button\n                  className=\"btn btn-outline-success\"\n                  style={{\n                    verticalAlign: \"middle\"\n                  }}\n                  onClick={() => alertNodeInfo(rowInfo)}\n                >\n                  ℹ\n                </button>\n              ]\n            })}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}